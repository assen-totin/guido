/**
 * File combiner for Nodejs.
 * 
 * @author Assen Totin assen.totin@gmail.com
 * @author Mike https://github.com/moagrius
 *
 * Updated for the GUIdo project, copyright (C) 2014 Assen Totin, assen.totin@gmail.com
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

var CommentStripper = function () {
	var SLASH = '/';
	var BACK_SLASH = '\\';
	var STAR = '*';
	var DOUBLE_QUOTE = '"';
	var SINGLE_QUOTE = "'";
	var NEW_LINE = '\n';
	var CARRIAGE_RETURN = '\r';

	this.string = '',
	this.length = 0,
	this.position = 0,
	this.output = null,

	this.getCurrentCharacter = function () {
		return this.string.charAt(this.position);
	};

	this.getPreviousCharacter = function () {
		return this.string.charAt(this.position - 1);
	};

	this.getNextCharacter = function () {
		return this.string.charAt(this.position + 1);
	};

	this.add = function () {
		this.output.push(this.getCurrentCharacter());
	};

	this.next = function () {
		this.position++;
	};

	this.atEnd = function () {
		return this.position >= this.length;
	};

	this.isEscaping = function () {
		if (this.getPreviousCharacter() == BACK_SLASH) {
			var offset = 1;
			var escaped = true;
			while ((this.position - offset) > 0) {
				escaped = !escaped;
				var current = this.position - offset;
				if (this.string.charAt(current) != BACK_SLASH) {
					return escaped;
				}
				offset++;
			}
			return escaped;
		}
		return false;
	};

	this.processSingleQuotedString = function () {
		if (this.getCurrentCharacter() == SINGLE_QUOTE) {
			this.add();
			this.next();
			while (!this.atEnd()) {
				if (this.getCurrentCharacter() == SINGLE_QUOTE && !this.isEscaping()) {
					return;
				}
				this.add();
				this.next();
			}
		}
	};

	this.processDoubleQuotedString = function () {
		if (this.getCurrentCharacter() == DOUBLE_QUOTE) {
			this.add();
			this.next();
			while (!this.atEnd()) {
				if (this.getCurrentCharacter() == DOUBLE_QUOTE && !this.isEscaping()) {
					return;
				}
				this.add();
				this.next();
			}
		}
	};

	this.processSingleLineComment = function () {
		if (this.getCurrentCharacter() == SLASH) {
			if (this.getNextCharacter() == SLASH) {
				this.next();
				while (!this.atEnd()) {
					this.next();
					if (this.getCurrentCharacter() == NEW_LINE || this.getCurrentCharacter() == CARRIAGE_RETURN) {
						return;
					}
				}
			}
		}
	};

	this.processMultiLineComment = function () {
		if (this.getCurrentCharacter() == SLASH) {
			if (this.getNextCharacter() == STAR) {
				this.next();
				while (!this.atEnd()) {
					this.next();
					if (this.getCurrentCharacter() == STAR) {
						if (this.getNextCharacter() == SLASH) {
							this.next();
							this.next();
							return;
						}
					}
				}
			}
		}
	};

	this.processRegex = function () {
		if (this.getCurrentCharacter() == SLASH) {
			if (this.getNextCharacter() != STAR && this.getNextCharacter() != SLASH) {
				while (!this.atEnd()) {
					this.add();
					this.next();
					if (this.getCurrentCharacter() == SLASH && !this.isEscaping()) {
						return;
					}
				}
			}
		}
	};

	this.process = function () {
		while (!this.atEnd()) {
			this.processRegex();
			this.processDoubleQuotedString();
			this.processSingleQuotedString();
			this.processSingleLineComment();
			this.processMultiLineComment();
			if (!this.atEnd()) {
				this.add();
				this.next();
			}
		}
	};

	this.reset = function () {
		this.string = '';
		this.length = 0;
		this.position = 0;
		this.output = [];
	};

	this.strip = function (string) {
		this.reset();
		this.string = string;
		this.length = this.string.length;
		this.process();
		return this.output.join('');
		}

/*
	if (typeof define === 'function') {
		define('commentstripper', [], function () {
			return CommentStripper;
		});
	}
*/

	//return window.CommentStripper = CommentStripper;
}

module.exports = CommentStripper;

