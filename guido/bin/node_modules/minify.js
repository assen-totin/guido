/**
 * File minifier for Nodejs.
 * 
 * @author Assen Totin assen.totin@gmail.com
 * 
 * Created for the GUIdo project, copyright (C) 2014 Assen Totin, assen.totin@gmail.com
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

var Minify = function(options) {
	/**
	 * Minify multi-line text. 
	 * @params text String The text to minify.
	 * @returns String The minified text. 
	 */
	this.minifyText = function(text) {
		var inComment = false;
		var inEscape = false;
		var inRegex = false;
		var inStringSingle = false;
		var inStringDouble = false;
		var output = [];
		var line;
		var char;
		var next;
		var prev;

		// Convert to Unix format prior to splitting
		var text2 = text.replace(/\r\n/g, '\n');

		// Split to lines
		var lines = text2.split('\n');

		for (var i=0; i < lines.length; i++) {
			// Skip empty lines
			if (lines[i].match(/^$/))
				continue;

			// Remove multiple spaces and tabs
			lines[i] = lines[i].replace(/\s+/g, ' ');

			line = '';
			prev = null;
			inRegex = false;
			inEscape = false;

			for (var j=0; j < lines[i].length; j++) {
				char = lines[i].substring(j, j+1);

/*
// DEBUG
console.log('inStringSingle: ' + inStringSingle);
console.log('inStringDouble: ' + inStringDouble);
console.log('inComment: ' + inComment);
console.log('inEscape: ' + inEscape);
console.log('inRegex: ' + inRegex);
console.log(char);
*/
				if (char == "'") {
					if (! inRegex && ! inEscape && ! inStringDouble && ! inComment) {
						if (inStringSingle)
							inStringSingle = false;
						else
							inStringSingle = true;
					}
				}

				if (char == '"') {
					if (! inRegex && ! inEscape && ! inStringSingle && ! inComment) {
						if (inStringDouble)
							inStringDouble = false;
						else
							inStringDouble = true;
					}
				}


				if ((char == '/') && ! (inStringSingle || inStringDouble || inEscape)) {
					if (inComment) {
						// If in a comment, we only care about finding its end
						if (prev == '*')
							// End of a */ comment
							inComment = false;
						continue;
					}

					next = lines[i].substring(j+1, j+2);

					if (next == '/')
						// Start of a // comment, so ignore everything till the end of the line
						break;
					else if (next == '*')
						// Start of a /* comment
						inComment = true;
					else {
						// Maybe this is the beginning or end of a regex?
						if (! inRegex)
							inRegex = true;
						else
							inRegex = false;
					}
				}

				if ((char == '\\'))
					inEscape = true;
				else
					inEscape = false;

				if (! inComment)
					line += char;

				prev = char;
			}

			output.push(line);
		}

		return output.join('');
	};

	/**
	 * Helper function to minify a Buffer by first converting to string, then minifying and finally converting back to Buffer.
	 * Useful for minifying files read from the file system. 
	 * UTF-8 encoding always assumed.  
	 * @param buffer Buffer The binary buffer to minify. 
	 * @returns Buffer The minified buffer.  
	 */
	this.minifyBuffer = function(buffer) {
		var text = buffer.toString();
		var min = this.minifyText(text);
		return new Buffer.from(min, 'utf8');
	};
	
};

module.exports = Minify;

