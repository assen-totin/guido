/**
 * Line-by-line reader module for Nodejs.
 * 
 * @author Assen Totin assen.totin@gmail.com
 * 
 * Created for the GUIdo project, copyright (C) 2015 Assen Totin, assen.totin@gmail.com
 * Contains code by Alex, www.interstellasystems.com 
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

var fs = require('fs');
var stream = require('stream');

/*
 * LineReader object
 * @param cb Function The function to call with each line.
 */

var LineReader = function(cb) {
	// Create a line-by-line reader
	this.liner = new stream.Transform({objectMode: true });

	// Attach a transform function
	this.liner._transform = function (chunk, encoding, done) {
		var data = chunk.toString();
		if (this._lastLineData) data = this._lastLineData + data;
 
		var lines = data.split('\n');
		this._lastLineData = lines.splice(lines.length-1,1)[0];
 
		lines.forEach(this.push.bind(this));
		done();
	};

	// Attach a flush function (needed to get the last line)
	this.liner._flush = function (done) {
		if (this._lastLineData) this.push(this._lastLineData);
		this._lastLineData = null;
		done();
	};

	var self = this;
	this.liner.on('readable', function () {
		var line;
		while (line = self.liner.read()) {
			cb(line);
		}
	});
};

/*
 * Attach a signal listener
 * @param signal String The name of the signal to attach to.
 * @param cb Function The function to call when the signal gets emitted.
 */
LineReader.prototype.onSignal = function(signal, cb) {
	this.liner.on(signal, function (){
		cb();
	});
};

/*
 * Attach a file to the line reader
 * @param file String The file to read.
 */
LineReader.prototype.attachSource = function(file) {
	// Create input stream
	this.source = fs.createReadStream(file);

	// Attach the source
	this.source.pipe(this.liner);
};

module.exports = LineReader;

